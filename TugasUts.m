function ImageProccesing ()
   MainFrm = figure ( ...
    'position', [300, 50, 700 600], ...
    'resize', 'off'); 
    
     TitleFrm1 = axes ( ... 
    'position', [0, 0.93, 0.5, 0.2], ... 
    'color',    [0.5, 0.5, 1], ...
    'xtick',    [], ... 
    'ytick',    [], ...  
    'xlim',     [0, 1], ... 
    'ylim',     [0, 1] );
    
    Title1 = text (0.25, 0.2, 'Gambar sebelumnya', 'fontsize', 20);
    
      ImgFrm1 = axes ( ...
    'position', [0, 0.38, 0.5, 0.55], ... 
    'xtick',    [], ... 
    'ytick',    [], ...
    'xlim',     [0, 1], ... 
    'ylim',     [0, 1]);
    
    TitleFrm2 = axes ( ... 
    'position', [0.5, 0.93, 0.5, 0.2], ... 
    'color',    [0.5, 0.5, 1], ...
    'xtick',    [], ... 
    'ytick',    [], ...  
    'xlim',     [0, 1], ... 
    'ylim',     [0, 1] );
    
    Title2 = text (0.25, 0.2, 'Gambar sesudah', 'fontsize', 20);
    
    ImgFrm2 = axes ( ...
    'position', [0.5, 0.38, 0.5, 0.55], ... 
    'xtick',    [], ... 
    'ytick',    [], ...
    'xlim',     [0, 1], ... 
    'ylim',     [0, 1]);
    
    BukaGambar = uicontrol (MainFrm, ...
    'style',    'pushbutton', ... 
    'string',   'BUKA GAMBAR', ...
    'units',    'normalized', ...
    'position', [0.01, 0.3, 0.2, 0.06], ...
    'callback', { @previewImage, ImgFrm1 });
    
    GrayAverage = uicontrol (MainFrm, ...
    'style',    'pushbutton', ... 
    'string',   'Grayscale(Average)', ...
    'units',    'normalized', ...
    'position', [0.25, 0.3, 0.2, 0.06], ...
    'callback', { @GrayscaleAverage, ImgFrm2});
    
    GrayLuminos = uicontrol (MainFrm, ...
    'style',    'pushbutton', ... 
    'string',   'Grayscale(Luminocity)', ...
    'units',    'normalized', ...
    'position', [0.46, 0.3, 0.2, 0.06], ...
    'callback', { @GreyLuminocity, ImgFrm2});
    
    GrayBiner = uicontrol (MainFrm, ...
    'style',    'pushbutton', ... 
    'string',   'Grayscale to Biner', ...
    'units',    'normalized', ...
    'position', [0.67, 0.3, 0.2, 0.06], ...
    'callback', { @GreytoBiner, ImgFrm2});
    
    PutarGambar = uicontrol (MainFrm, ...
    'style',    'pushbutton', ... 
    'string',   'PUTAR GAMBAR', ...
    'units',    'normalized', ...
    'position', [0.01, 0.2, 0.2, 0.06], ...
    'callback', { @putargambar, ImgFrm2});
    
    Filterbatas = uicontrol (MainFrm, ...
    'style',    'pushbutton', ... 
    'string',   'Filter Batas', ...
    'units',    'normalized', ...
    'position', [0.25, 0.2, 0.2, 0.06], ...
    'callback', { @filterBatas, ImgFrm2});
    
    Filtermedian = uicontrol (MainFrm, ...
    'style',    'pushbutton', ... 
    'string',   'Filter Median', ...
    'units',    'normalized', ...
    'position', [0.46, 0.2, 0.2, 0.06], ...
    'callback', { @filterMedian, ImgFrm2});
    
    Filterpereratan = uicontrol (MainFrm, ...
    'style',    'pushbutton', ... 
    'string',   'Filter Pereratan', ...
    'units',    'normalized', ...
    'position', [0.67, 0.2, 0.2, 0.06], ...
    'callback', { @filterPererataan, ImgFrm2});
    
    Citranegatif = uicontrol (MainFrm, ...
    'style',    'pushbutton', ... 
    'string',   'CITRA NEGATIF', ...
    'units',    'normalized', ...
    'position', [0.01, 0.1, 0.2, 0.06], ...
    'callback', { @citranegatif, ImgFrm2});
    
end
    
function previewImage (hObject, eventdata, ImageFrame)
  [fname, fpath] = uigetfile();
  a = imread (fullfile(fpath, fname));
  axes(ImageFrame);
  imshow(a, []);
  axis image off
  imwrite(a, 'test.png');
end

function GrayscaleAverage (hObject, eventdata, ImageFrame)
  img = imread ('test.png');
  abu = (img(:,:,1)+img(:,:,2)+img(:,:,3))/3;
axes(ImageFrame);
imshow(abu);
axis image off
end

function GreyLuminocity (hObject, eventdata, ImageFrame)
  img = imread('test.png');
  abulumi = (img(:,:,1) * 0.2989) + (img(:,:,2) * 0.5870) + (img(:,:,3) * 0.1141)
axes(ImageFrame);
imshow(abulumi, []);
axis image off
imwrite(abulumi, 'greyluminocity.png');
end

function GreytoBiner (hObject, eventdata, ImageFrame)
  img = imread('greyluminocity.png');
  [tinggi, lebar] = size(img);
  ambang = 100
  biner = zeros(tinggi, lebar);
  for baris = 1 : tinggi
    for kolom = 1 : lebar
      if img(baris, kolom) >= ambang
        biner(baris, kolom) = 0;
      else biner(baris, kolom) = 1;
      endif
    endfor
  endfor
axes(ImageFrame);
imshow(biner, []);
axis image off
end   

function putargambar (hObject, eventdata, ImageFrame)
  gambar = imread('test.png');
  [tinggi, lebar] = size(gambar);
  a = imcrop(gambar, [1 1 tinggi/2 lebar/2]);
  b = imcrop(gambar, [1 lebar/2 tinggi/2 lebar/2]);
  c = imcrop(gambar, [tinggi/2 1 tinggi/2 lebar/2]);
  d = imcrop(gambar, [tinggi/2 lebar/2 tinggi/2 lebar/2]);
  e = horzcat(b,a);
  f = horzcat(d,c);
  g = vertcat(e,f);
axes(ImageFrame);
imshow(g, []);
axis image off
endfunction

function citranegatif (hObject, eventdata, ImageFrame)
  gambar = imread('test.png');
  g = 255 - gambar;
axes(ImageFrame);
imshow(g, []);
axis image off
endfunction

function filterBatas (hObject, eventdata, ImageFrame)
  F = imread('test.png');
  ukuran = size(F);
  tinggi = ukuran(1);
  lebar = ukuran(2);
  G = F;
  for baris=2 : tinggi-1
    for kolom=2 : lebar-1
      minPiksel = min([F(baris-1, kolom-1) 
      F(baris-1, kolom)
      F(baris, kolom+1)
      F(baris, kolom-1)
      F(baris, kolom+1)
      F(baris+1, kolom-1)
      F(baris+1, kolom) 
      F(baris+1, kolom+1)]);
      
      maksPiksel = max([F(baris-1, kolom-1)
      F(baris-1, kolom) 
      F(baris, kolom+1)
      F(baris, kolom-1)
      F(baris, kolom+1) 
      F(baris+1, kolom-1)
      F(baris+1, kolom) 
      F(baris+1, kolom+1)]);
      
      if F(baris, kolom) < minPiksel
         G(baris, kolom) = minPiksel;
      else
         if F(baris, kolom) > maksPiksel
            G(baris, kolom) = maksPiksel;
         else 
            G(baris, kolom) = F(baris, kolom);
         endif
      endif
    endfor
  endfor

axes(ImageFrame);
imshow(G, []);
axis image off
clear;
endfunction

function filterMedian (hObject, eventdata, ImageFrame)
  F = imread('test.png');
  [tinggi,lebar] = size(F);
  for baris=2 : tinggi-1
    for kolom=2 : lebar-1
      data = [F(baris-1, kolom-1) ...
      F(baris-1, kolom) ...
      F(baris-1, kolom+1) ...
      F(baris, kolom-1) ...
      F(baris, kolom) ...
      F(baris, kolom+1) ...
      F(baris+1, kolom-1) ...
      F(baris+1, kolom) ...
      F(baris+1, kolom+1)];
      
      for i=1 : 8
        for j = i+1 : 9
          if data(i) > data(j)
            tmp = data (i);
            data(i) = data(j);
            data(j) = tmp;
          endif
        endfor
      endfor
      G(baris, kolom) = data(5);
    endfor
  endfor
 
axes(ImageFrame); 
imshow(G, []);
axis image off
clear;
endfunction

function filterPererataan (hObject, eventdata, ImageFrame)
    F = imread('test.png');
  [tinggi, lebar] = size(F);
  F2= double(F);
  for baris = 2 : tinggi-1
    for kolom = 2 : lebar-1
      jum = F2(baris-1, kolom-1)+ ...
            F2(baris-1, kolom) + ...
            F2(baris-1, kolom-1)+ ...
            F2(baris, kolom-1) + ...
            F2(baris, kolom) + ...
            F2(baris, kolom+1) + ...
            F2(baris+1, kolom-1)+ ...
            F2(baris+1, kolom)+ ...
            F2(baris+1, kolom+1);
      G(baris, kolom)= uint8(1/9 * jum);
    endfor
  endfor
axes(ImageFrame);
imshow(G, []);
axis image off
clear;
endfunction